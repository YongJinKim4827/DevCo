<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cyberi.devcommunity.repository.mybatis.MybatisBoardRepository">
    <resultMap id="boardResultMap" type="com.cyberi.devcommunity.dto.BoardItem">
        <result property="boardNo"          column="BOARD_NO"           />
        <result property="boardContent"     column="BOARD_CONTENT"
            jdbcType="CLOB" javaType="java.lang.String"
        />
        <result property="share"            column="BOARD_SHARE"        />
        <result property="views"            column="VIEWS"              />
        <result property="boardType"        column="BOARD_TYPE"         />
        <result property="boardTitle"       column="BOARD_TITLE"        />
        <result property="writeDate"        column="WRITE_DATE"         />
        <result property="writer"           column="WRITER"             />
        <result property="recommendation"   column="RECOMMENDATION"     />
        <result property="like"             column="BOARD_LIKE"         />
        <result property="replyCount"       column="REPLY_COUNT"        />
        <result property="boardLikeUser"       column="BOARD_LIKE_USER"    />
        <result property="useChat"       column="USE_CHAT"    />
    </resultMap>

    <resultMap id="boardLikeMap" type="com.cyberi.devcommunity.dto.BoardLikeItem">
        <result property="boardNo"          column="BOARD_NO"           />
        <result property="isLike"           column="IS_LIKE"            />
        <result property="likeUser"         column="LIKE_USER"          />
        <result property="likeDate"         column="LIKE_DATE"          />
    </resultMap>

    <select id="mainBoardList" resultMap="boardResultMap">
        SELECT
        C.BOARD_NO, C.BOARD_TYPE, C.BOARD_TITLE, C.WRITER, C.BOARD_SHARE, C.VIEWS, C.WRITE_DATE,
        C.BOARD_LIKE, C.REPLY_COUNT
        FROM
        (SELECT
        B.BOARD_NO, B.BOARD_TYPE, B.BOARD_TITLE, B.WRITER, B.BOARD_SHARE, B.VIEWS, B.WRITE_DATE,
        (   SELECT COUNT(LIKE_USER) FROM BOARD_LIKE_INFO L WHERE L.IS_LIKE = 'Y' AND L.BOARD_NO = B.BOARD_NO
        ) AS BOARD_LIKE,
        (
        SELECT COUNT(REPLY_NO) FROM REPLY_INFO R WHERE R.BOARD_NO = B.BOARD_NO
        )AS REPLY_COUNT
        FROM BOARD_INFO B
        WHERE B.BOARD_TYPE = #{boardType}
        AND B.BOARD_SHARE = 'Y'
        ORDER BY B.WRITE_DATE DESC) C
        WHERE ROWNUM <![CDATA[<=]]> 5
    </select>

    <select id="weeklyBest" resultMap="boardResultMap">
        SELECT
        C.BOARD_TYPE, C.BOARD_TITLE, C.WRITER, C.BOARD_SHARE, C.VIEWS, C.BOARD_LIKE, C.REPLY_COUNT
        FROM
        (SELECT
        B.BOARD_NO, 'W'||B.BOARD_TYPE AS BOARD_TYPE, B.BOARD_TITLE AS BOARD_TITLE, B.WRITER AS WRITER, B.BOARD_SHARE AS BOARD_SHARE, B.VIEWS AS VIEWS,
        B.WRITE_DATE AS WRITE_DATE,
        (   SELECT COUNT(LIKE_USER) FROM BOARD_LIKE_INFO L WHERE L.IS_LIKE = 'Y' AND L.BOARD_NO = B.BOARD_NO
        ) AS BOARD_LIKE,
        (
        SELECT COUNT(REPLY_NO) FROM REPLY_INFO R WHERE R.BOARD_NO = B.BOARD_NO
        )AS REPLY_COUNT
        FROM BOARD_INFO B
        WHERE
        WRITE_DATE
        BETWEEN TO_DATE(to_char( sysdate-( (select to_char(sysdate,'D') from dual) -2 ), 'yyyy-mm-dd'))
        AND TO_DATE(to_char( sysdate-( (select to_char(sysdate,'D') from dual) -2 )+7, 'yyyy-mm-dd'))
        AND B.BOARD_SHARE = 'Y'
        ORDER BY B.VIEWS DESC, B.BOARD_LIKE DESC
        ) C
        WHERE ROWNUM <![CDATA[<=]]> 5
    </select>
    <!-- 게시글 리스트 조회 -->
    <select id="selectBoardList" resultMap="boardResultMap">
        SELECT
            B.BOARD_NO AS BOARD_NO, SUBSTR( B.BOARD_CONTENT, 1, 100 ) AS BOARD_CONTENT /*100자 까지만 로딩*/,
            B.BOARD_SHARE AS BOARD_SHARE, B.VIEWS AS VIEWS, B.BOARD_TYPE AS BOARD_TYPE,
            B.BOARD_TITLE AS BOARD_TITLE,
            (
              SELECT COUNT(LIKE_USER) FROM BOARD_LIKE_INFO
              WHERE IS_LIKE = 'Y'
              AND BOARD_NO = B.BOARD_NO
              )
            AS BOARD_LIKE,
            TO_CHAR(B.WRITE_DATE, 'YYYY-MM-DD hh24:mi:ss') AS WRITE_DATE, B.WRITER AS WRITER,
            (
                SELECT
                    COUNT(REPLY_NO)
                FROM
                    REPLY_INFO
                WHERE BOARD_NO = B.BOARD_NO
            ) AS REPLY_COUNT
        FROM
          BOARD_INFO B
        WHERE 1=1
        AND B.BOARD_SHARE = 'Y'
        <if test="boardType != '' and boardType != null">
            AND B.BOARD_TYPE = #{boardType}
        </if>
        <if test="boardNo != '' and boardNo != null">
            AND B.BOARD_NO = #{boardNo}
        </if>
        <if test="writer != null and writer != ''">
            AND WRITER = #{writer}
        </if>
        <if test="searchCondition != null and searchCondition != ''">
            AND (BOARD_CONTENT LIKE  '%' ||  #{searchCondition} || '%' OR BOARD_CONTENT LIKE  '%' ||  #{searchCondition} || '%')
        </if>
        ORDER BY B.WRITE_DATE DESC
    </select>

    <!-- 게시글 내용 조회 -->
    <select id="selectBoardItem" resultMap="boardResultMap">
        SELECT
            BOARD_NO, BOARD_CONTENT,
            BOARD_SHARE, VIEWS, BOARD_TYPE,
            BOARD_TITLE, TO_CHAR(WRITE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS WRITE_DATE,
            WRITER, (
                    SELECT LIKE_USER FROM BOARD_LIKE_INFO
                    WHERE BOARD_NO = #{boardNo}
                    AND LIKE_USER = #{loginUser}
                    AND IS_LIKE = 'Y'
            ) AS BOARD_LIKE_USER,
            (
                SELECT COUNT(IS_LIKE) FROM BOARD_LIKE_INFO
                    WHERE BOARD_NO = #{boardNo}
            )AS BOARD_LIKE,
            (
                SELECT USE_CHAT FROM USER_INFO
                WHERE USER_ID =WRITER
            ) AS USE_CHAT
        FROM
          BOARD_INFO
        WHERE 1=1
        <if test="boardNo != null and boardNo != ''">
            AND BOARD_NO = #{boardNo}
        </if>
        <if test="writer != null and writer != ''">
            AND WRITER = #{writer}
        </if>
    </select>


    <select id="selectMyBoard" resultMap="boardResultMap">
        SELECT BOARD_NO, WRITER, WRITE_DATE, BOARD_SHARE, BOARD_TYPE, BOARD_TITLE
        FROM BOARD_INFO
        WHERE WRITER = #{writer}
        ORDER BY WRITE_DATE DESC
    </select>

    <select id="selectLikeBoard" resultMap="boardLikeMap">
        SELECT IS_LIKE, LIKE_USER FROM BOARD_LIKE_INFO
        WHERE BOARD_NO = #{boardNo}
        AND LIKE_USER = #{likeUser}
    </select>
    <insert id="registryBoard">
        INSERT INTO BOARD_INFO
        (
            BOARD_TITLE,
            BOARD_CONTENT,
            BOARD_SHARE,
            BOARD_TYPE,
            WRITER,
            WRITE_DATE
        ) VALUES (
            #{boardTitle},
            #{boardContent},
            #{share},
            #{boardType},
            #{writer, jdbcType=VARCHAR},
            SYSDATE
        )
    </insert>

    <insert id="insertLike">
        INSERT INTO BOARD_LIKE_INFO
        (
            BOARD_NO, LIKE_USER, LIKE_DATE, IS_LIKE
        ) VALUES (
            #{boardNo}, #{likeUser}, SYSDATE, 'Y'
        )
    </insert>

    <update id="updateLike">
        UPDATE BOARD_LIKE_INFO SET
            IS_LIKE = #{isLike}
        WHERE BOARD_NO = #{boardNo}
        AND LIKE_USER = #{likeUser}
    </update>
    
    <update id="updateBoard">
        UPDATE BOARD_INFO SET
            <if test = "boardContent != null and boardContent != ''">
                BOARD_CONTENT = #{boardContent},
            </if>
            BOARD_TITLE = #{boardTitle},
            BOARD_SHARE = #{share}
        WHERE 1=1
        AND BOARD_NO = #{boardNo}
    </update>

    <update id="increaseViews">
            UPDATE BOARD_INFO SET
            VIEWS = VIEWS + 1
        WHERE 1=1
        AND BOARD_NO = #{boardNo}
    </update>

    <delete id="deleteBoard">
        DELETE FROM BOARD_INFO
        WHERE BOARD_NO = #{boardNo}
    </delete>
</mapper>
